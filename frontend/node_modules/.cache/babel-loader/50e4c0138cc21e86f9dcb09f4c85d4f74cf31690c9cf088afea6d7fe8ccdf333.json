{"ast":null,"code":"import api from './api';\nexport const propertyService = {\n  // Get all properties with filters\n  async getProperties(params = {}) {\n    const response = await api.get('/properties', {\n      params\n    });\n    return response.data;\n  },\n  // Get single property by ID\n  async getProperty(id) {\n    const response = await api.get(`/properties/${id}`);\n    return response.data;\n  },\n  // Create new property (admin only)\n  async createProperty(propertyData) {\n    const formData = new FormData();\n\n    // Append all property data\n    Object.keys(propertyData).forEach(key => {\n      if (key === 'images') {\n        // Handle multiple files\n        if (propertyData.images && propertyData.images.length > 0) {\n          Array.from(propertyData.images).forEach(file => {\n            formData.append('images', file);\n          });\n        }\n      } else if (key === 'coordinates' || key === 'features') {\n        // Handle objects and arrays\n        formData.append(key, JSON.stringify(propertyData[key]));\n      } else {\n        formData.append(key, propertyData[key]);\n      }\n    });\n    const response = await api.post('/properties', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Update property (admin only)\n  async updateProperty(id, propertyData) {\n    const formData = new FormData();\n\n    // Append all property data\n    Object.keys(propertyData).forEach(key => {\n      if (key === 'images' && propertyData.images instanceof FileList) {\n        // Handle new file uploads\n        Array.from(propertyData.images).forEach(file => {\n          formData.append('images', file);\n        });\n      } else if (key === 'coordinates' || key === 'features') {\n        // Handle objects and arrays\n        formData.append(key, JSON.stringify(propertyData[key]));\n      } else if (propertyData[key] !== undefined) {\n        formData.append(key, propertyData[key]);\n      }\n    });\n    const response = await api.put(`/properties/${id}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Delete property (admin only)\n  async deleteProperty(id) {\n    const response = await api.delete(`/properties/${id}`);\n    return response.data;\n  },\n  // Get property statistics (admin only)\n  async getPropertyStats() {\n    const response = await api.get('/properties/admin/stats');\n    return response.data;\n  },\n  // Remove image from property (admin only)\n  async removePropertyImage(id, imageUrl) {\n    const response = await api.delete(`/properties/${id}/images`, {\n      data: {\n        imageUrl\n      }\n    });\n    return response.data;\n  },\n  // Search properties with filters\n  async searchProperties(filters) {\n    const queryParams = new URLSearchParams();\n\n    // Add all filter parameters\n    Object.keys(filters).forEach(key => {\n      if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\n        if (Array.isArray(filters[key])) {\n          filters[key].forEach(value => {\n            queryParams.append(key, value);\n          });\n        } else {\n          queryParams.append(key, filters[key]);\n        }\n      }\n    });\n    const response = await api.get(`/properties?${queryParams.toString()}`);\n    return response.data;\n  },\n  // Get properties near location\n  async getPropertiesNearby(latitude, longitude, radius = 10, additionalFilters = {}) {\n    const params = {\n      latitude,\n      longitude,\n      radius,\n      ...additionalFilters\n    };\n    const response = await api.get('/properties', {\n      params\n    });\n    return response.data;\n  },\n  // Format price for display\n  formatPrice(price) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(price);\n  },\n  // Format area for display\n  formatArea(area) {\n    return new Intl.NumberFormat('en-US').format(area) + ' sq ft';\n  },\n  // Get property type label\n  getPropertyTypeLabel(type) {\n    const types = {\n      house: 'House',\n      apartment: 'Apartment',\n      condo: 'Condo',\n      townhouse: 'Townhouse',\n      villa: 'Villa',\n      studio: 'Studio'\n    };\n    return types[type] || type;\n  },\n  // Get property status label and color\n  getPropertyStatusInfo(status) {\n    const statuses = {\n      available: {\n        label: 'Available',\n        color: 'green'\n      },\n      pending: {\n        label: 'Pending',\n        color: 'yellow'\n      },\n      sold: {\n        label: 'Sold',\n        color: 'red'\n      },\n      rented: {\n        label: 'Rented',\n        color: 'blue'\n      }\n    };\n    return statuses[status] || {\n      label: status,\n      color: 'gray'\n    };\n  }\n};","map":{"version":3,"names":["api","propertyService","getProperties","params","response","get","data","getProperty","id","createProperty","propertyData","formData","FormData","Object","keys","forEach","key","images","length","Array","from","file","append","JSON","stringify","post","headers","updateProperty","FileList","undefined","put","deleteProperty","delete","getPropertyStats","removePropertyImage","imageUrl","searchProperties","filters","queryParams","URLSearchParams","isArray","value","toString","getPropertiesNearby","latitude","longitude","radius","additionalFilters","formatPrice","price","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatArea","area","getPropertyTypeLabel","type","types","house","apartment","condo","townhouse","villa","studio","getPropertyStatusInfo","status","statuses","available","label","color","pending","sold","rented"],"sources":["C:/Users/ADMIN/Documents/Web Designs/full-stack/upwork/real-estate-listings-app/frontend/src/services/propertyService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const propertyService = {\r\n  // Get all properties with filters\r\n  async getProperties(params = {}) {\r\n    const response = await api.get('/properties', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Get single property by ID\r\n  async getProperty(id) {\r\n    const response = await api.get(`/properties/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Create new property (admin only)\r\n  async createProperty(propertyData) {\r\n    const formData = new FormData();\r\n    \r\n    // Append all property data\r\n    Object.keys(propertyData).forEach(key => {\r\n      if (key === 'images') {\r\n        // Handle multiple files\r\n        if (propertyData.images && propertyData.images.length > 0) {\r\n          Array.from(propertyData.images).forEach(file => {\r\n            formData.append('images', file);\r\n          });\r\n        }\r\n      } else if (key === 'coordinates' || key === 'features') {\r\n        // Handle objects and arrays\r\n        formData.append(key, JSON.stringify(propertyData[key]));\r\n      } else {\r\n        formData.append(key, propertyData[key]);\r\n      }\r\n    });\r\n\r\n    const response = await api.post('/properties', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Update property (admin only)\r\n  async updateProperty(id, propertyData) {\r\n    const formData = new FormData();\r\n    \r\n    // Append all property data\r\n    Object.keys(propertyData).forEach(key => {\r\n      if (key === 'images' && propertyData.images instanceof FileList) {\r\n        // Handle new file uploads\r\n        Array.from(propertyData.images).forEach(file => {\r\n          formData.append('images', file);\r\n        });\r\n      } else if (key === 'coordinates' || key === 'features') {\r\n        // Handle objects and arrays\r\n        formData.append(key, JSON.stringify(propertyData[key]));\r\n      } else if (propertyData[key] !== undefined) {\r\n        formData.append(key, propertyData[key]);\r\n      }\r\n    });\r\n\r\n    const response = await api.put(`/properties/${id}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Delete property (admin only)\r\n  async deleteProperty(id) {\r\n    const response = await api.delete(`/properties/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get property statistics (admin only)\r\n  async getPropertyStats() {\r\n    const response = await api.get('/properties/admin/stats');\r\n    return response.data;\r\n  },\r\n\r\n  // Remove image from property (admin only)\r\n  async removePropertyImage(id, imageUrl) {\r\n    const response = await api.delete(`/properties/${id}/images`, {\r\n      data: { imageUrl }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Search properties with filters\r\n  async searchProperties(filters) {\r\n    const queryParams = new URLSearchParams();\r\n    \r\n    // Add all filter parameters\r\n    Object.keys(filters).forEach(key => {\r\n      if (filters[key] !== undefined && filters[key] !== null && filters[key] !== '') {\r\n        if (Array.isArray(filters[key])) {\r\n          filters[key].forEach(value => {\r\n            queryParams.append(key, value);\r\n          });\r\n        } else {\r\n          queryParams.append(key, filters[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    const response = await api.get(`/properties?${queryParams.toString()}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Get properties near location\r\n  async getPropertiesNearby(latitude, longitude, radius = 10, additionalFilters = {}) {\r\n    const params = {\r\n      latitude,\r\n      longitude,\r\n      radius,\r\n      ...additionalFilters\r\n    };\r\n    \r\n    const response = await api.get('/properties', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Format price for display\r\n  formatPrice(price) {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(price);\r\n  },\r\n\r\n  // Format area for display\r\n  formatArea(area) {\r\n    return new Intl.NumberFormat('en-US').format(area) + ' sq ft';\r\n  },\r\n\r\n  // Get property type label\r\n  getPropertyTypeLabel(type) {\r\n    const types = {\r\n      house: 'House',\r\n      apartment: 'Apartment',\r\n      condo: 'Condo',\r\n      townhouse: 'Townhouse',\r\n      villa: 'Villa',\r\n      studio: 'Studio'\r\n    };\r\n    return types[type] || type;\r\n  },\r\n\r\n  // Get property status label and color\r\n  getPropertyStatusInfo(status) {\r\n    const statuses = {\r\n      available: { label: 'Available', color: 'green' },\r\n      pending: { label: 'Pending', color: 'yellow' },\r\n      sold: { label: 'Sold', color: 'red' },\r\n      rented: { label: 'Rented', color: 'blue' }\r\n    };\r\n    return statuses[status] || { label: status, color: 'gray' };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}